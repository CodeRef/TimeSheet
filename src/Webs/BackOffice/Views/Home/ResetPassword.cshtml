@model RestMeet.Service.ViewModels.ResetPassword
@{
    Layout = "~/Views/Shared/_Layout-Full.cshtml";
}

@section styles{
    @Styles.Render("~/Content/Frontend-default")
    @Styles.Render("~/Content/Frontend-Lock")
    @Styles.Render("~/Content/Frontend-theme")
    <style>
        .field-validation-error {
            color: #e80c4d;
            font-weight: bold;
        }

        input.input-validation-error {
            border: 1px solid #e80c4d;
        }

        .validation-summary-errors {
            color: #e80c4d;
            font-weight: bold;
            font-size: 1.1em;
        }
    </style>
}

<div class="page-lock">
    <div class="page-logo">
        <a href="/" style="font-size: 260%; font-weight: 600;">
            <font color="#FFFFFF">SIAM</font><font color="red">MARKET</font>
        </a>
    </div>
    <div class="page-body">
        <img class="page-lock-img" src="../../Content/themes/metronic/assets/admin/pages/media/profile/profile.jpg" alt="">
        <div class="page-lock-info">
            <h1>Hi @Model.ApplicateionUser.FirstName @Model.ApplicateionUser.LastName</h1>
            <span class="email">
                Please enter new password.
            </span>
            @using (Html.BeginForm("ResetPassword", "Account", new { area = "Backend", ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "login-form", role = "form" }))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(a => a.ApplicateionUser.Id)
                @Html.HiddenFor(a => a.Code)
                <div class="form-group">
                    <label class="control-label visible-ie8 visible-ie9">Password</label>
                    <div class="input-icon">
                        <i class="fa fa-lock"></i>
                        @*<input class="form-control placeholder-no-fix" type="password" autocomplete="off" id="register_password" placeholder="Password" name="password" />*@
                        @Html.PasswordFor(m => m.Password, new { @class = "form-control placeholder-no-fix", placeholder = "Password", Name = "password" })
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label visible-ie8 visible-ie9">Re-type Your Password</label>
                    <div class="controls">
                        <div class="input-icon">
                            <i class="fa fa-check"></i>
                            @*<input class="form-control placeholder-no-fix" type="password" autocomplete="off" placeholder="Re-type Your Password" name="rpassword" />*@
                            @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control placeholder-no-fix", placeholder = "Re-type your password", Name = "rpassword" })
                        </div>
                    </div>
                </div>
                <div class="form-actions">
                    <button type="submit" id="register-submit-btn" class="btn blue pull-right">
                        Reset Password <i class="m-icon-swapright m-icon-white"></i>
                    </button>
                </div>
            }
        </div>
    </div>
    <div class="page-footer-custom">
        2015 &copy; Siam Market - <a href="/corporate">Checkout our corporate page.</a>
    </div>
</div>
@section scripts{
    @Scripts.Render("~/bundles/Frontend-Core")
    @Scripts.Render("~/bundles/Frontend-Plugin")
    @Scripts.Render("~/bundles/Frontend-Script")
    <script>
        jQuery(document).ready(function () {
            Metronic.init(); // init metronic core components
            // init background slide images
            Lock.init();
            $('.login-form').validate({
                errorElement: 'span', //default input error message container
                errorClass: 'help-block', // default input error message class
                focusInvalid: false, // do not focus the last invalid input
                ignore: "",
                rules: {
                    password: {
                        required: true
                    },
                    rpassword: {
                        equalTo: "#Password"
                    }
                }, messages: { // custom messages for radio buttons and checkboxes
                    tnc: {
                        required: "Please accept TNC first."
                    }
                },
                invalidHandler: function (event, validator) { //display error alert on form submit

                },
                highlight: function (element) { // hightlight error inputs
                    $(element)
                        .closest('.form-group').addClass('has-error'); // set error class to the control group
                },

                success: function (label) {
                    label.closest('.form-group').removeClass('has-error');
                    label.remove();
                },

                errorPlacement: function (error, element) {
                    if (element.closest('.input-icon').size() === 1) {
                        error.insertAfter(element.closest('.input-icon'));
                    } else {
                        error.insertAfter(element);
                    }
                },

                submitHandler: function (form) {
                    form.submit();
                }
            });

            $('.login-form input').keypress(function (e) {
                if (e.which == 13) {
                    if ($('.login-form').validate().form()) {
                        $('.login-form').submit();
                    }
                    return false;
                }
            });

        });
    </script>
}